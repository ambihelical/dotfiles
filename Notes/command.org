* Git
** Undo last commit (returns changes to modified):
	=git reset --soft HEAD^=

** Undo reset
	=git reset HEAD@{1}=

** Reset branch to remote (discard all changes locally)
	=git reset --hard remote/remote-name=
	- remote can be "origin" which is tracked remote branch

** Redo last commit.  Any additions to the index are added to the new commit:
	=git commit --amend=

** Discard modifications:
	=git checkout -- file=
	=git checkout -- .=       -> all in directory

** Remove files not under version control, including ignored files:
	=git clean -nx=           # dry-run
   =git clean -fx=           # do for real

** Really clean up repo
   =git clean -fdx=
   =git reset -hard=

** Set HEAD to another branch in bare repository
	=git symbolic-ref HEAD refs/heads/<name>=

** Pull using ssh:  (see also notes on ssh)
	=git pull user@host:~/git-repo-in-home=

** Push to branch
	=git push remote-name branch-name=
    =git push -u origin branch:remote-branch=  # create remote branch & set tracking branch

** Checkout remote branch
   git co -b local-name remote/branch       # checkout remote branch with local name
   git co -t remote/branch                  # checkout remote track with same name

** Search commit contents
	=git log --grep=string=        # commits where string exists
	=git log -Sstring=             # commits where count of string changed
	=git log -Gstring=             # commits where string was added or removed

** Rebase branch to master
	=git checkout mybranch=
	=git rebase master=

** Revision syntax
	^ first parent
	^n nth parent
	~n nth ancestor

** Update submodules
	=git submodule update --init=

** Rebase general form
	=git rebase --onto <graft-point> <excluding> <including>=
	- <graft-point> defaults to <including>
	- <including> defaults to current branch HEAD
	- <excluding> exclude this commit (and earlier) from graft

** Modify Commit author
   git commit --amend --author="Adolf Hitler <derfuhrer@blitzkrieg.com>"
   git commit --amend --reset-author    # reset to config value

** Split up commit during interactive rebase
  - edit the commit
  - reset HEAD^   # optionally just some files
  - add and commit each seperate piece
  - continue rebase

** Updating super-repo
  - add each changed submodule
  - commit super-repo

* Linux
** Xargs with input not at end of command
	=e.g. =cmd|xargs -I LINE cp LINE dest=
** High fidelity rsync copy
  =rsync -HAXEglorth --progress old new=
** Extended attributes
	- Install package attr
	- tools: getfattr, setfattr
	- Note: cp needs --preserve=all to preserve attributes
** Switch to root from account which can't sudo
	=su -m -=
** Run command as root (when not in sudoers)
	=su -c '<command>' root=
** Search man pages
	=apropos <keyword>=
** Convert address in crash backtrace to file location
   =addr2line -e executable dump-address=
   - executable is program or shared object
   - dump-address is hex address directly from backtrace
** Ssh to screen session
ssh -t $host screen -r $session
* Bash
** Redirections
*** redirect stderr to err.log
    =cmd 2> err.log=
*** redirect stderr to stdout
    =cmd 2>&1=
*** redirect stderr & stdout to file
    =cmd &> log=
*** redirect stderr & stdout, append to file
    =cmd >> log 2>&1=

*** Save all output to file
    =cmd 2>&1 | tee file=
    =cmd 2>&1 | tee -a file=
** Find type of command
	=type CMD=
** Unset environment var
	=unset VAR=
** recursive command
	=find PATH -print0 | xargs -0 COMMAND=
** notice new binaries
	=hash -r=
** useful variables:
  - $# - number parameters
  - $@ - list of parameters
  - ${var%.*} - strip extension

** Rename files
	=for fn in *pattern*; do echo mv $fn ${fn/old-pat/new-pat}; done | /bin/bash=

** Difference two directories
    diff -rq dir1 dir2
    meld dir1 dir2   # untested

** Terminal screen size
	LINES=#
	COLUMNS=#

** Send file to FTP server
   curl -T $fn ftp://ftp3.realtek.com --user user:password

** Port scan
    # can trigger firewalls and get you blocked!
    nmap [-Pn] [-p port[-port]] ipaddr

** Strict mode
	=set -euo pipefail=
	IFS=$'\n\t'

** Run function when script exits
	function myexit {
		rm -rf "#tempfile#"
	}
	try myexit EXIT

** Null Utility - colon expands arguments but does nothing
    false || { : $foo ; }

    if false
    then :
    else
    echo "true"
    fi

** Create temporary directory, Linux or OSX
	=tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'template-pattern')=

** Decrypt several PGP/GPG files
   =gpg --decrypt-files <files>=   # prompts once

** Export pgp key
   =gpg --export -a "user name" > gpg.key.asc=

** Expand arguments but do nothing (aka :)
	- =false || { : $foo ; }=
   - can use for then block if nothing to do when true

** Batch renames
   =rename 's/sch/rep' file-glob=

** Batch search/replace
   =perl -pi -w -e 's/sch/rep/g;' file-glob=

* Imagemagick
** Composite three images into one (not very generic)
	=convert -size 278x160 xc:black \( $1 -resize 93 \) -geometry +0+10  -composite \( $2 -resize 93 \) -geometry +93+10  -composite \( $3 -resize 93 \) -geometry +186+10  -composite $4=
* Gtags
** Create GTAGS files for a set of directories
   Find ./dir1 ./dir2 ./dir3 |gtags --file=-
* Cmake
** Generate compile_commands.json
	add -DCMAKE_EXPORT_COMPILE_COMMANDS=ON to cmake invocations
** Create cmake external project

    This is an example, something that didn't get used, but it worked:

    Here CMAKE_COMMAND expands to the path of the current cmake executable,
    this can be a different cmake if needed

    Note there is no CONFIGURE_COMMAND, the CMAKE_COMMAND detects this is a
    cmake configure (I think)


    ExternalProject_Add(ta-demux
        PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libdemux/"
        DEPENDS ""
        SOURCE_DIR ${src_demux}
        BUILD_IN_SOURCE 0
        CMAKE_COMMAND ${CMAKE_COMMAND}
        CMAKE_ARGS
            -DCMAKE_C_COMPILER=${TRUSTZONE_TOOLCHAIN_PREFIX}gcc
            -DCMAKE_RANLIB=${TRUSTZONE_TOOLCHAIN_PREFIX}ranlib
            -DCMAKE_C_FLAGS=${cflags_demux}
            -DJUNE_DEMUX_COMPILE_OPTIONS=${cflags_demux}
            -DJUNE_TOPDIR=${JUNE_TOPDIR}
        BUILD_COMMAND
            COMMAND make -j${jlevel} VPATH=${src_demux} coredemux
        INSTALL_COMMAND
            COMMAND mkdir -p ${CMAKE_CURRENT_BINARY_DIR}/lib/
            COMMAND cp libcoredemux.a ${CMAKE_CURRENT_BINARY_DIR}/lib/
    )
